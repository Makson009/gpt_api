require('dotenv').config();  // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const express = require('express');
const OpenAI = require('openai');
const path = require('path');
const prompt_dictionary = require('../config');
const app = express();

let skipApiRequest = true;


app.use(express.json());
app.use(express.static(path.join(__dirname, '../public'), { maxAge: 0 }));

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üîÅ –ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è
function translate(value) {
    return prompt_dictionary[value] || value;
}

// üß† –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
function createSentenceFromData(data) {
    const parts = [];

    if (data.section1?.button) {
        parts.push(`–°–æ—Å—Ç–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç "${translate(data.section1.button)}".`);
    }

    if (data.section2?.button) {
        parts.push(`–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${translate(data.section2.button)}.`);
        for (const [key, value] of Object.entries(data.section2.fields || {})) {
            parts.push(`${capitalize(key)}: ${value}.`);
        }
    }

    if (data.section3?.button) {
        parts.push(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${translate(data.section3.button)}.`);
        for (const [key, value] of Object.entries(data.section3.fields || {})) {
            parts.push(`${capitalize(key)}: ${value}.`);
        }
    }

    if (data.section4) {
        parts.push(`–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: ${data.section4}`);
    }

    return parts.join(' ');
}

function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

// üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /submit
app.post('/submit', async (req, res) => {
    try {
        const receivedData = req.body;
        const sentence = createSentenceFromData(receivedData);

        let gptAnswer = '';

        if (!skipApiRequest) {
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
            const remaining = await decrementRemainingRequests(receivedData.userId);

            const gptResponse = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [
                    { role: "system", content: prompt_dictionary["system_prompt"] },
                    { role: "user", content: sentence }
                ],
            });
            gptAnswer = gptResponse.choices[0].message.content;

            res.json({ message: "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ", result: gptAnswer, remaining });
        } else {
            gptAnswer = "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω, –Ω–æ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ–¥–º–µ–Ω—É.";
            res.json({ message: "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ", result: gptAnswer, remaining: 3 });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// üîÅ –¢—É–º–±–ª–µ—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
app.post('/toggle-api-request', (req, res) => {
    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–ª–∞–≥ skipApiRequest
    if (skipApiRequest) {
        res.json({ message: 'API –∑–∞–ø—Ä–æ—Å—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–ø—É—â–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞)' });
    } else {
        res.json({ message: 'API –∑–∞–ø—Ä–æ—Å—ã –≤–∫–ª—é—á–µ–Ω—ã' });
    }
});


// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
app.post('/api/remaining-requests', async (req, res) => {
    const { userId } = req.body;  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    if (!userId) {
        return res.status(400).json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    try {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ –ë–î –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã
        const remaining = await getRemainingRequests(userId);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏ –≤ –æ—Ç–≤–µ—Ç
        res.json({ remaining });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getRemainingRequests(userId) {
    try {
        const result = await client.query('SELECT remainingRequests FROM users WHERE userId = $1', [userId]);
        
        if (result.rows.length > 0) {
            return result.rows[0].remainingrequests;
        } else {
            skipApiRequest = true;// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ true
            
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        throw new Error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
async function decrementRemainingRequests(userId) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userCheck = await client.query('SELECT remainingRequests FROM users WHERE userId = $1', [userId]);
        
        if (userCheck.rows.length === 0) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await client.query('INSERT INTO users (userId, remainingRequests) VALUES ($1, 3)', [userId]);
            return 3;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        const result = await client.query('UPDATE users SET remainingRequests = remainingRequests - 1 WHERE userId = $1 RETURNING remainingRequests', [userId]);
        return result.rows[0].remainingrequests;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
        throw new Error("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    }
}


module.exports = app;

